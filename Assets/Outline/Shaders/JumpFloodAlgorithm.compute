#pragma kernel Init
#pragma kernel JumpFloodStep

#include "UnityCG.cginc"

// x - object ID, sorted by Z relative to camera
// y - color ID
Texture2D<float2> Silhouette;

Texture2D<float4> Input;
RWTexture2D<float4> Output;
uint BufferWidth;
uint BufferHeight;
uint StepWidth;
float OutlineWidthSquared;

#define JFA_NULL -1.0
const static int2 directions[8] = 
{
    int2(-1, -1),
    int2(-1, 0),
    int2(-1, 1),
    int2(0, -1),
    int2(0, 1),
    int2(1, -1),
    int2(1, 0),
    int2(1, 1)
};

[numthreads(8, 8, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    float2 value = Silhouette[id.xy];
    if (value.x > 0)
        Output[id.xy] = float4(id.xy, value.xy);
    else
        Output[id.xy] = JFA_NULL;
}

[numthreads(8, 8, 1)]
void JumpFloodStep (uint3 id : SV_DispatchThreadID)
{
    float objectID = Silhouette[id.xy].x;
    float4 closestPointData = Input[id.xy];
    float bestDist = 1.#INF;
    
    [unroll]
    for (int i = 0; i < 8; i++)
    {
        int2 offsetCoord = clamp(id.xy + directions[i] * StepWidth, 0, int2(BufferWidth - 1, BufferHeight - 1));
        float4 neighbourData = Input[offsetCoord];

        if (neighbourData.x != JFA_NULL)
        {
            float2 disp = neighbourData.xy - id.xy;
            float dist = dot(disp, disp);
            bool b;
            if (closestPointData.z == neighbourData.z 
                || bestDist > OutlineWidthSquared
                || dist > OutlineWidthSquared)
                b = dist < bestDist;
            else
                b = closestPointData.z < neighbourData.z;

            if (b && (objectID == JFA_NULL || objectID < neighbourData.z))
            {
                bestDist = dist;
                closestPointData = neighbourData;
            }
        }
    }

    Output[id.xy] = closestPointData;
}
